// <auto-generated />
using System;
using DataAccessLayer.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(CFCDbContext))]
    [Migration("20201205074151_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DataAccessLayer.Models.Branches", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("branch_id")
                        .UseIdentityColumn();

                    b.Property<string>("BranchLocation")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("branch_location");

                    b.Property<string>("BranchManager")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("branch_manager");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("branch_name");

                    b.Property<long>("BranchNumber")
                        .HasColumnType("BIGINT")
                        .HasColumnName("branch_number");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("modified_date");

                    b.HasKey("BranchId")
                        .HasName("pk_branch_id");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("user_id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("last_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("modified_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("password");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("BIGINT")
                        .HasColumnName("phone_number");

                    b.Property<int>("RoleId")
                        .HasColumnType("INT");

                    b.HasKey("UserId")
                        .HasName("pk_user");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("role_id")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT")
                        .HasColumnName("is_active");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("pk_user_role");

                    b.ToTable("user_role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserRoles", "UserRoles")
                        .WithOne("User")
                        .HasForeignKey("DataAccessLayer.Models.User", "RoleId")
                        .HasConstraintName("fk_user_user_roles")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserRoles", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
